__constant char x_offsets[] = {1, 2, 2, 1, -1,-2,-2,-1};
__constant char y_offsets[] = {2, 1,-1,-2, -2,-1, 1, 2};

bool is_solved(__global char * board, char size){
    for(int i = 0; i < (size * size); i++){
        if(board[i] == 0){
            return false;
        }    
    }

    return true;
}

void get_possible_moves(__global char * board, char pos, char size, char * possible_moves){
    char pos_x, pos_y, new_pos;

    for(int i = 0; i < 8; i++){
        pos_x = (pos % size) + x_offsets[i];
        pos_y = (pos / size) + y_offsets[i];

        new_pos = pos_x + (pos_y * size);

        if( new_pos >= 0 && (new_pos < (size * size)) &&
            pos_x >= 0 && pos_x < size &&
            pos_y >= 0 && pos_y < size){

            if (board[new_pos] == 0){
                possible_moves[i] = new_pos;
            }else{
                possible_moves[i] = -1;
            }
        }else{
            possible_moves[i] = -1;
        }
    }
}

void set_move(__global char * board, char pos, char * current_move){
    (*current_move)++;
    board[pos] = (*current_move);
}

void move_back(__global char * board, char * current_move, char size, char * pos){
    char old_pos = *pos;
    if(*current_move != 1){
        (*current_move)--;

        for(int i = 0; i < (size * size); i++){
            if(*current_move == board[i]){
                *pos = i;
            }
        }

        board[old_pos] = 0;
    }
}

uchar get_amount_of_moves(char * moves){
    uchar amount = 0;
    for(int i = 0; i < 8; i++){
        if(moves[i] >= 0){
            amount++;
        }
    }
    return amount;
}

char get_first_move(char * moves){
    for(int i = 0; i < 8; i++){
        if(moves[i] >= 0){
            char move = moves[i];
            moves[i] = -1;
            return move;
        }
    }
    return -1;
}

void print_board(__global char * board, char size){
    printf("Work item:%d\n", get_global_id(0));
    for (char x = 0; x < size; x++) {
        for (char y = 0; y < size; y++){
            printf("[%d]\t", board[y + (x * size)] );
        }
        printf("\n");
    }
    printf("\n");
}

void init_board(char * board, char size){
    for(int i = 0; i < (size * size); i++){
        board[i] = 0;
    }
}

__kernel void knights_tour_solve(__global char* result_list) {
    unsigned int solutions = 0;

    char nodes[size * size][8];
    uchar counter = 0;
    char pos;
    char current_move = 1;

    char board[size * size];
    init_board(&board, size);

    char start = get_global_id(0);
    board[start] = current_move;

    get_possible_moves(&board, start, size, nodes[counter]);
    counter++;

    while(!is_solved(&board, size) && counter != 0){
        
        counter--;

        if(get_amount_of_moves(nodes[counter]) > 0){
            pos = get_first_move(nodes[counter]);
            counter += 2;

            set_move(&board, pos, &current_move);
            get_possible_moves(&board, pos, size, nodes[counter - 1]);
        }else{
            move_back(&board, &current_move, size, &pos);
        }
    }

    print_board(&board, size);
}